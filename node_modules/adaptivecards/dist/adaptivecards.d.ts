declare module 'adaptivecards/enums' {
	export enum Size {
	    Auto = 0,
	    Stretch = 1,
	    Small = 2,
	    Medium = 3,
	    Large = 4,
	}
	export enum TextSize {
	    Small = 0,
	    Default = 1,
	    Medium = 2,
	    Large = 3,
	    ExtraLarge = 4,
	}
	export enum Spacing {
	    None = 0,
	    Small = 1,
	    Default = 2,
	    Medium = 3,
	    Large = 4,
	    ExtraLarge = 5,
	    Padding = 6,
	}
	export enum Padding {
	    None = 0,
	    Default = 1,
	}
	export enum TextWeight {
	    Lighter = 0,
	    Default = 1,
	    Bolder = 2,
	}
	export enum TextColor {
	    Default = 0,
	    Accent = 1,
	    Good = 2,
	    Warning = 3,
	    Attention = 4,
	}
	export enum HorizontalAlignment {
	    Left = 0,
	    Center = 1,
	    Right = 2,
	}
	export enum VerticalAlignment {
	    Top = 0,
	    Center = 1,
	    Bottom = 2,
	}
	export enum ActionAlignment {
	    Left = 0,
	    Center = 1,
	    Right = 2,
	    Stretch = 3,
	}
	export enum ImageStyle {
	    Default = 0,
	    Person = 1,
	}
	export enum ShowCardActionMode {
	    Inline = 0,
	    Popup = 1,
	}
	export enum Orientation {
	    Horizontal = 0,
	    Vertical = 1,
	}
	export enum BackgroundImageMode {
	    Stretch = 0,
	    RepeatHorizontally = 1,
	    RepeatVertically = 2,
	    Repeat = 3,
	}
	export enum ContainerStyle {
	    Default = 0,
	    Emphasis = 1,
	}
	export enum ValidationError {
	    Hint = 0,
	    ActionTypeNotAllowed = 1,
	    CollectionCantBeEmpty = 2,
	    Deprecated = 3,
	    ElementTypeNotAllowed = 4,
	    InteractivityNotAllowed = 5,
	    InvalidPropertyValue = 6,
	    MissingCardType = 7,
	    PropertyCantBeNull = 8,
	    TooManyActions = 9,
	    UnknownActionType = 10,
	    UnknownElementType = 11,
	    UnsupportedCardVersion = 12,
	}

}
declare module 'adaptivecards/host-config' {
	import * as Enums from 'adaptivecards/enums';
	export class SpacingDefinition {
	    left: number;
	    top: number;
	    right: number;
	    bottom: number;
	    constructor(obj?: any);
	}
	export class PaddingDefinition {
	    top: Enums.Padding;
	    right: Enums.Padding;
	    bottom: Enums.Padding;
	    left: Enums.Padding;
	    constructor(obj?: any);
	    toJSON(): {
	        top: string;
	        right: string;
	        bottom: string;
	        left: string;
	    };
	}
	export class TextColorDefinition {
	    normal: string;
	    subtle: string;
	    constructor(obj?: any);
	}
	export class ContainerStyleDefinition {
	    backgroundColor?: string;
	    readonly foregroundColors: {
	        default: TextColorDefinition;
	        accent: TextColorDefinition;
	        good: TextColorDefinition;
	        warning: TextColorDefinition;
	        attention: TextColorDefinition;
	    };
	    constructor(obj?: any);
	}
	export class AdaptiveCardConfig {
	    allowCustomStyle: boolean;
	    constructor(obj?: any);
	}
	export class ImageSetConfig {
	    imageSize: Enums.Size;
	    maxImageHeight: number;
	    constructor(obj?: any);
	    toJSON(): {
	        imageSize: string;
	        maxImageHeight: number;
	    };
	}
	export class FactTextDefinition {
	    size: Enums.TextSize;
	    color: Enums.TextColor;
	    isSubtle: boolean;
	    weight: Enums.TextWeight;
	    wrap: boolean;
	    constructor(obj?: any);
	    toJSON(): any;
	}
	export class FactTitleDefinition extends FactTextDefinition {
	    maxWidth?: number;
	    weight: Enums.TextWeight;
	    constructor(obj?: any);
	}
	export class FactSetConfig {
	    readonly title: FactTitleDefinition;
	    readonly value: FactTextDefinition;
	    spacing: number;
	    constructor(obj?: any);
	}
	export class ShowCardActionConfig {
	    actionMode: Enums.ShowCardActionMode;
	    inlineTopMargin: number;
	    style?: Enums.ContainerStyle;
	    constructor(obj?: any);
	    toJSON(): {
	        actionMode: string;
	        inlineTopMargin: number;
	        style: string;
	    };
	}
	export class ActionsConfig {
	    maxActions: number;
	    spacing: Enums.Spacing;
	    buttonSpacing: number;
	    readonly showCard: ShowCardActionConfig;
	    preExpandSingleShowCardAction?: boolean;
	    actionsOrientation: Enums.Orientation;
	    actionAlignment: Enums.ActionAlignment;
	    constructor(obj?: any);
	    toJSON(): {
	        maxActions: number;
	        spacing: string;
	        buttonSpacing: number;
	        showCard: ShowCardActionConfig;
	        preExpandSingleShowCardAction: boolean;
	        actionsOrientation: string;
	        actionAlignment: string;
	    };
	}
	export class ContainerStyleSet {
	    readonly default: ContainerStyleDefinition;
	    readonly emphasis: ContainerStyleDefinition;
	    constructor(obj?: any);
	}
	export class HostConfig {
	    supportsInteractivity: boolean;
	    fontFamily?: string;
	    readonly spacing: {
	        small: number;
	        default: number;
	        medium: number;
	        large: number;
	        extraLarge: number;
	        padding: number;
	    };
	    readonly separator: {
	        lineThickness: number;
	        lineColor: string;
	    };
	    readonly fontSizes: {
	        small: number;
	        default: number;
	        medium: number;
	        large: number;
	        extraLarge: number;
	    };
	    readonly fontWeights: {
	        lighter: number;
	        default: number;
	        bolder: number;
	    };
	    readonly imageSizes: {
	        small: number;
	        medium: number;
	        large: number;
	    };
	    readonly containerStyles: ContainerStyleSet;
	    readonly actions: ActionsConfig;
	    readonly adaptiveCard: AdaptiveCardConfig;
	    readonly imageSet: ImageSetConfig;
	    readonly factSet: FactSetConfig;
	    constructor(obj?: any);
	    getEffectiveSpacing(spacing: Enums.Spacing): number;
	    getEffectivePadding(padding: Enums.Padding): number;
	    paddingToSpacingDefinition(padding: PaddingDefinition): SpacingDefinition;
	    getContainerStyleDefinition(containerStyle: Enums.ContainerStyle): ContainerStyleDefinition;
	}

}
declare module 'adaptivecards/utils' {
	import * as Enums from 'adaptivecards/enums';
	export interface ISeparationDefinition {
	    spacing: number;
	    lineThickness?: number;
	    lineColor?: string;
	}
	export interface IInput {
	    id: string;
	    value: string;
	}
	export function getValueOrDefault<T>(obj: any, defaultValue: T): T;
	export function isNullOrEmpty(value: string): boolean;
	export function appendChild(node: Node, child: Node): void;
	export function getEnumValueOrDefault(targetEnum: {
	    [s: number]: string;
	}, name: string, defaultValue: number): number;
	export function parseHostConfigEnum(targetEnum: {
	    [s: number]: string;
	}, value: string | number, defaultValue: any): any;
	export function renderSeparation(separationDefinition: ISeparationDefinition, orientation: Enums.Orientation): HTMLElement;
	export function stringToCssColor(color: string): string;
	export class StringWithSubstitutions {
	    private _isProcessed;
	    private _original;
	    private _processed;
	    substituteInputValues(inputs: Array<IInput>): void;
	    get(): string;
	    set(value: string): void;
	}
	export function truncate(element: HTMLElement, maxHeight: number, lineHeight?: number): void;

}
declare module 'adaptivecards/text-formatters' {
	export function formatText(text: string): string;

}
declare module 'adaptivecards/schema' {
	import { HorizontalAlignment, Spacing } from 'adaptivecards/adaptivecards';
	export interface IActionBase extends ITypedElement {
	    speak?: string;
	    title: string;
	}
	export interface IActionHttp extends IActionBase {
	    body?: string;
	    headers?: any;
	    method?: string;
	    url: string;
	}
	export interface IActionOpenUrl extends IActionBase {
	    url: string;
	}
	export interface IActionShowCard extends IActionBase {
	    card: IAdaptiveCard;
	}
	export interface IActionSubmit extends IActionBase {
	    data?: any;
	}
	export interface IVersion {
	    major: number;
	    minor: number;
	}
	export interface IBackgroundImage {
	    url: string;
	}
	export interface IAdaptiveCard extends ITypedElement {
	    type: string;
	    version?: IVersion | string;
	    backgroundImage?: IBackgroundImage | string;
	    body?: (any)[];
	    actions?: (IActionBase)[];
	    speak?: string;
	    [propName: string]: any;
	}
	export interface ICardElement extends ITypedElement {
	    type: string;
	    id?: string;
	    horizontalAlignment?: HorizontalAlignment;
	    spacing?: Spacing;
	    separator?: boolean;
	    [propName: string]: any;
	}
	export interface IColumn extends IContainer {
	    size?: string;
	}
	export interface IColumnSet extends ICardElement {
	    columns: IColumn[];
	}
	export interface IContainerBase extends ICardElement {
	    actions?: (IActionHttp | IActionOpenUrl | IActionShowCard | IActionSubmit)[];
	    items?: (ITextBlock | IImage | IImageSet | IFactSet | IContainer | IColumnSet | IInputDate | IInputNumber | IInputText | IInputTime | IInputToggle)[];
	    selectAction?: (IActionHttp | IActionOpenUrl | IActionShowCard | IActionSubmit);
	    startGroup?: boolean;
	}
	export interface IContainer extends IContainerBase {
	}
	export interface IFact {
	    title: string;
	    speak?: string;
	    value: string;
	}
	export interface IFactSet extends ICardElement {
	    facts: IFact[];
	}
	export interface IImage extends ICardElement {
	    altText?: string;
	    selectAction?: IActionBase;
	    size?: ImageSize;
	    style?: ImageStyle;
	    url: string;
	}
	export interface IImageSet extends ICardElement {
	    images: IImage[];
	    size?: ImageSize;
	}
	export interface IInput extends ICardElement {
	    id: string;
	}
	export interface IInputDate extends IInput {
	    max?: string;
	    min?: string;
	    placeholder?: string;
	    value?: string;
	}
	export interface IInputNumber extends IInput {
	    max?: string;
	    min?: string;
	    placeholder?: string;
	    value?: string;
	}
	export interface IInputText extends IInput {
	    isMultiline?: boolean;
	    maxLength?: number;
	    style?: TextInputStyle;
	    placeholder?: string;
	    value?: string;
	}
	export interface IInputTime extends IInput {
	    max?: string;
	    min?: string;
	    placeholder?: string;
	    value?: string;
	}
	export interface IInputToggle extends IInput {
	    title: string;
	    value?: string;
	    valueOn?: string;
	    valueOff?: string;
	}
	export interface ITextBlock extends ICardElement {
	    color?: TextColor;
	    horizontalAlignment?: HorizontalAlignment;
	    isSubtle?: boolean;
	    maxLines?: number;
	    size?: TextSize;
	    text: string;
	    weight?: TextWeight;
	    wrap?: boolean;
	}
	export interface ITypedElement {
	    type: string;
	}
	export type ImageSize = "auto" | "stretch" | "small" | "medium" | "large";
	export type ImageStyle = "normal" | "person";
	export type TextColor = "default" | "dark" | "light" | "accent" | "good" | "warning" | "attention";
	export type TextInputStyle = "text" | "tel" | "url" | "email";
	export type TextSize = "small" | "normal" | "medium" | "large" | "extraLarge";
	export type TextWeight = "lighter" | "normal" | "bolder";
	export class TypedElement implements ITypedElement {
	    constructor(type: string);
	    type: string;
	}
	export class Card extends TypedElement implements IAdaptiveCard {
	    constructor(init?: Partial<IAdaptiveCard>);
	    actions?: (IActionHttp | IActionOpenUrl | IActionShowCard | IActionSubmit)[];
	    backgroundImage?: string;
	    body?: (ITextBlock | IImage | IImageSet | IFactSet | IContainer | IColumnSet | IInputDate | IInputNumber | IInputText | IInputTime | IInputToggle)[];
	    speak?: string;
	    title?: string;
	}
	export class ActionBase extends TypedElement implements IActionBase {
	    constructor(type: string, init?: Partial<IActionBase>);
	    speak?: string;
	    title: string;
	}
	export class ActionHttp extends ActionBase implements IActionHttp {
	    constructor(init?: Partial<IActionHttp>);
	    body?: string;
	    headers?: any;
	    method?: string;
	    url: string;
	}
	export class ActionOpenUrl extends ActionBase implements IActionOpenUrl {
	    constructor(init?: Partial<IActionOpenUrl>);
	    url: string;
	}
	export class ActionShowCard extends ActionBase implements IActionShowCard {
	    constructor(init?: Partial<IActionShowCard>);
	    card: IAdaptiveCard;
	}
	export class ActionSubmit extends ActionBase implements IActionSubmit {
	    constructor(init?: Partial<IActionSubmit>);
	    data?: any;
	}
	export class CardElement extends TypedElement implements ICardElement {
	    constructor(type: string, init?: Partial<ICardElement>);
	    speak?: string;
	}
	export class ColumnSet extends CardElement implements IColumnSet {
	    constructor(init?: Partial<IColumnSet>);
	    columns: IColumn[];
	}
	export class ContainerBase extends CardElement implements IContainerBase {
	    constructor(type: string, init?: Partial<IContainerBase>);
	    actions?: (IActionHttp | IActionOpenUrl | IActionShowCard | IActionSubmit)[];
	    items?: (ITextBlock | IImage | IImageSet | IFactSet | IContainer | IColumnSet | IInputDate | IInputNumber | IInputText | IInputTime | IInputToggle)[];
	    selectAction?: (IActionHttp | IActionOpenUrl | IActionShowCard | IActionSubmit);
	    startGroup?: boolean;
	}
	export class Container extends ContainerBase implements IContainer {
	    constructor(init?: Partial<IContainer>);
	}
	export class Column extends ContainerBase implements IColumn {
	    constructor(init?: Partial<IColumn>);
	    size?: string;
	}
	export class Fact implements IFact {
	    constructor(init?: Partial<IFact>);
	    title: string;
	    speak?: string;
	    value: string;
	}
	export class FactSet extends CardElement implements IFactSet {
	    constructor(init?: Partial<IFactSet>);
	    facts: IFact[];
	}
	export class Image extends CardElement implements IImage {
	    constructor(init?: Partial<IImage>);
	    altText?: string;
	    horizontalAlignment?: HorizontalAlignment;
	    selectAction?: IActionBase;
	    size?: ImageSize;
	    style?: ImageStyle;
	    url: string;
	}
	export class ImageSet extends CardElement implements IImageSet {
	    constructor(init?: Partial<IImageSet>);
	    images: IImage[];
	    size?: ImageSize;
	}
	export class Input extends CardElement implements IInput {
	    constructor(type: string, init?: Partial<IInput>);
	    id: string;
	}
	export class InputDate extends Input implements IInputDate {
	    constructor(init?: Partial<IInputDate>);
	    max?: string;
	    min?: string;
	    placeholder?: string;
	    value?: string;
	}
	export class InputNumber extends Input implements IInputNumber {
	    constructor(init?: Partial<IInputNumber>);
	    max?: string;
	    min?: string;
	    placeholder?: string;
	    value?: string;
	}
	export class InputText extends Input implements IInputText {
	    constructor(init?: Partial<IInputText>);
	    isMultiline?: boolean;
	    maxLength?: number;
	    style?: TextInputStyle;
	    placeholder?: string;
	    value?: string;
	}
	export class InputTime extends Input implements IInputTime {
	    constructor(init?: Partial<IInputTime>);
	    max?: string;
	    min?: string;
	    placeholder?: string;
	    value?: string;
	}
	export class InputToggle extends Input implements IInputToggle {
	    constructor(init?: Partial<IInputToggle>);
	    title: string;
	    value?: string;
	    valueOn?: string;
	    valueOff?: string;
	}
	export class TextBlock extends TypedElement implements ITextBlock {
	    constructor(init?: Partial<ITextBlock>);
	    color?: TextColor;
	    horizontalAlignment?: HorizontalAlignment;
	    isSubtle?: boolean;
	    maxLines?: number;
	    size?: TextSize;
	    text: string;
	    weight?: TextWeight;
	    wrap?: boolean;
	}

}
declare module 'adaptivecards/card-elements' {
	import * as Enums from 'adaptivecards/enums';
	import * as Utils from 'adaptivecards/utils';
	import * as HostConfig from 'adaptivecards/host-config';
	export interface IValidationError {
	    error: Enums.ValidationError;
	    message: string;
	}
	export abstract class CardElement {
	    private _hostConfig?;
	    private _internalPadding;
	    private _parent;
	    private _isVisibile;
	    private _renderedElement;
	    private _separatorElement;
	    private _rootCard;
	    private internalRenderSeparator();
	    private updateRenderedElementVisibility();
	    protected internalGetNonZeroPadding(padding: HostConfig.PaddingDefinition): void;
	    protected adjustRenderedElementSize(renderedElement: HTMLElement): void;
	    protected showBottomSpacer(requestingElement: CardElement): void;
	    protected hideBottomSpacer(requestingElement: CardElement): void;
	    protected setParent(value: CardElement): void;
	    protected readonly useDefaultSizing: boolean;
	    protected abstract internalRender(): HTMLElement;
	    protected readonly allowCustomPadding: boolean;
	    protected readonly defaultPadding: HostConfig.PaddingDefinition;
	    protected internalPadding: HostConfig.PaddingDefinition;
	    protected readonly separatorOrientation: Enums.Orientation;
	    id: string;
	    speak: string;
	    horizontalAlignment?: Enums.HorizontalAlignment;
	    spacing: Enums.Spacing;
	    separator: boolean;
	    height: "auto" | "stretch";
	    abstract getJsonTypeName(): string;
	    abstract renderSpeech(): string;
	    getNonZeroPadding(): HostConfig.PaddingDefinition;
	    getForbiddenElementTypes(): Array<string>;
	    getForbiddenActionTypes(): Array<any>;
	    parse(json: any): void;
	    validate(): Array<IValidationError>;
	    render(): HTMLElement;
	    updateLayout(processChildren?: boolean): void;
	    isAtTheVeryTop(): boolean;
	    isFirstElement(element: CardElement): boolean;
	    isAtTheVeryBottom(): boolean;
	    isLastElement(element: CardElement): boolean;
	    isAtTheVeryLeft(): boolean;
	    isLeftMostElement(element: CardElement): boolean;
	    isAtTheVeryRight(): boolean;
	    isRightMostElement(element: CardElement): boolean;
	    canContentBleed(): boolean;
	    getRootElement(): CardElement;
	    getParentContainer(): Container;
	    getAllInputs(): Array<Input>;
	    getElementById(id: string): CardElement;
	    getActionById(id: string): Action;
	    hostConfig: HostConfig.HostConfig;
	    readonly isInteractive: boolean;
	    readonly isStandalone: boolean;
	    readonly parent: CardElement;
	    isVisible: boolean;
	    readonly renderedElement: HTMLElement;
	    readonly separatorElement: HTMLElement;
	}
	export class TextBlock extends CardElement {
	    size: Enums.TextSize;
	    weight: Enums.TextWeight;
	    color: Enums.TextColor;
	    text: string;
	    isSubtle: boolean;
	    wrap: boolean;
	    maxLines: number;
	    private _computedLineHeight;
	    private _originalInnerHtml;
	    protected internalRender(): HTMLElement;
	    parse(json: any): void;
	    getJsonTypeName(): string;
	    renderSpeech(): string;
	    updateLayout(processChildren?: boolean): void;
	    private truncateIfSupported();
	}
	export class Fact {
	    name: string;
	    value: string;
	    speak: string;
	    renderSpeech(): string;
	}
	export class FactSet extends CardElement {
	    protected readonly useDefaultSizing: boolean;
	    protected internalRender(): HTMLElement;
	    facts: Array<Fact>;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    renderSpeech(): string;
	}
	export class Image extends CardElement {
	    private _selectAction;
	    protected readonly useDefaultSizing: boolean;
	    protected internalRender(): HTMLElement;
	    style: Enums.ImageStyle;
	    backgroundColor: string;
	    url: string;
	    size: Enums.Size;
	    pixelWidth?: number;
	    pixelHeight?: number;
	    altText: string;
	    getJsonTypeName(): string;
	    getActionById(id: string): Action;
	    parse(json: any): void;
	    renderSpeech(): string;
	    selectAction: Action;
	}
	export class ImageSet extends CardElement {
	    private _images;
	    protected internalRender(): HTMLElement;
	    imageSize: Enums.Size;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    addImage(image: Image): void;
	    renderSpeech(): string;
	}
	export abstract class Input extends CardElement implements Utils.IInput {
	    id: string;
	    title: string;
	    defaultValue: string;
	    readonly abstract value: string;
	    validate(): Array<IValidationError>;
	    parse(json: any): void;
	    renderSpeech(): string;
	    getAllInputs(): Array<Input>;
	    readonly isInteractive: boolean;
	}
	export class TextInput extends Input {
	    private _textareaElement;
	    private _inputElement;
	    protected internalRender(): HTMLElement;
	    maxLength: number;
	    isMultiline: boolean;
	    placeholder: string;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    readonly value: string;
	}
	export class ToggleInput extends Input {
	    private _checkboxInputElement;
	    protected internalRender(): HTMLElement;
	    title: string;
	    valueOn: string;
	    valueOff: string;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    readonly value: string;
	}
	export class Choice {
	    title: string;
	    value: string;
	}
	export class ChoiceSetInput extends Input {
	    private _selectElement;
	    private _toggleInputs;
	    protected internalRender(): HTMLElement;
	    choices: Array<Choice>;
	    isCompact: boolean;
	    isMultiSelect: boolean;
	    placeholder: string;
	    getJsonTypeName(): string;
	    validate(): Array<IValidationError>;
	    parse(json: any): void;
	    readonly value: string;
	}
	export class NumberInput extends Input {
	    private _numberInputElement;
	    protected internalRender(): HTMLElement;
	    min: string;
	    max: string;
	    placeholder: string;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    readonly value: string;
	}
	export class DateInput extends Input {
	    private _dateInputElement;
	    protected internalRender(): HTMLElement;
	    getJsonTypeName(): string;
	    readonly value: string;
	}
	export class TimeInput extends Input {
	    private _timeInputElement;
	    protected internalRender(): HTMLElement;
	    getJsonTypeName(): string;
	    readonly value: string;
	}
	export abstract class Action {
	    private _parent;
	    private _actionCollection;
	    protected setParent(value: CardElement): void;
	    abstract getJsonTypeName(): string;
	    execute(): void;
	    private setCollection(actionCollection);
	    setStatus(status: any): void;
	    validate(): Array<IValidationError>;
	    prepare(inputs: Array<Input>): void;
	    parse(json: any): void;
	    getAllInputs(): Array<Input>;
	    getActionById(id: string): Action;
	    id: string;
	    title: string;
	    readonly parent: CardElement;
	}
	export class SubmitAction extends Action {
	    private _isPrepared;
	    private _originalData;
	    private _processedData;
	    getJsonTypeName(): string;
	    prepare(inputs: Array<Input>): void;
	    parse(json: any): void;
	    data: Object;
	}
	export class OpenUrlAction extends Action {
	    url: string;
	    getJsonTypeName(): string;
	    validate(): Array<IValidationError>;
	    parse(json: any): void;
	}
	export class HttpHeader {
	    private _value;
	    name: string;
	    prepare(inputs: Array<Input>): void;
	    value: string;
	}
	export class HttpAction extends Action {
	    private _url;
	    private _body;
	    private _headers;
	    method: string;
	    getJsonTypeName(): string;
	    validate(): Array<IValidationError>;
	    prepare(inputs: Array<Input>): void;
	    parse(json: any): void;
	    url: string;
	    body: string;
	    readonly headers: Array<HttpHeader>;
	}
	export class ShowCardAction extends Action {
	    protected setParent(value: CardElement): void;
	    readonly card: AdaptiveCard;
	    title: string;
	    getJsonTypeName(): string;
	    validate(): Array<IValidationError>;
	    parse(json: any): void;
	    getAllInputs(): Array<Input>;
	    getActionById(id: string): Action;
	}
	export class ActionSet extends CardElement {
	    private _actionCollection;
	    protected internalRender(): HTMLElement;
	    orientation?: Enums.Orientation;
	    constructor();
	    getJsonTypeName(): string;
	    validate(): Array<IValidationError>;
	    parse(json: any, itemsCollectionPropertyName?: string): void;
	    addAction(action: Action): void;
	    getAllInputs(): Array<Input>;
	    renderSpeech(): string;
	    readonly isInteractive: boolean;
	}
	export class BackgroundImage {
	    url: string;
	    mode: Enums.BackgroundImageMode;
	    horizontalAlignment: Enums.HorizontalAlignment;
	    verticalAlignment: Enums.VerticalAlignment;
	    parse(json: any): void;
	    apply(element: HTMLElement): void;
	}
	export class Container extends CardElement {
	    private _selectAction;
	    private isElementAllowed(element, forbiddenElementTypes);
	    private _items;
	    private _style?;
	    private readonly hasExplicitStyle;
	    protected showBottomSpacer(requestingElement: CardElement): void;
	    protected hideBottomSpacer(requestingElement: CardElement): void;
	    protected applyPadding(): void;
	    protected internalRender(): HTMLElement;
	    protected readonly hasBackground: boolean;
	    protected readonly defaultStyle: Enums.ContainerStyle;
	    protected readonly allowCustomStyle: boolean;
	    backgroundImage: BackgroundImage;
	    bleed: boolean;
	    verticalContentAlignment: Enums.VerticalAlignment;
	    style: Enums.ContainerStyle;
	    getJsonTypeName(): string;
	    isFirstElement(element: CardElement): boolean;
	    isLastElement(element: CardElement): boolean;
	    validate(): Array<IValidationError>;
	    parse(json: any, itemsCollectionPropertyName?: string): void;
	    addItem(item: CardElement): void;
	    clear(): void;
	    canContentBleed(): boolean;
	    getAllInputs(): Array<Input>;
	    getElementById(id: string): CardElement;
	    getActionById(id: string): Action;
	    renderSpeech(): string;
	    updateLayout(processChildren?: boolean): void;
	    selectAction: Action;
	}
	export class Column extends Container {
	    private _computedWeight;
	    protected adjustRenderedElementSize(renderedElement: HTMLElement): void;
	    protected readonly separatorOrientation: Enums.Orientation;
	    width: number | "auto" | "stretch";
	    pixelWidth: number;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    readonly isStandalone: boolean;
	}
	export class ColumnSet extends CardElement {
	    private _columns;
	    private _selectAction;
	    protected internalRender(): HTMLElement;
	    getJsonTypeName(): string;
	    parse(json: any): void;
	    validate(): Array<IValidationError>;
	    updateLayout(processChildren?: boolean): void;
	    addColumn(column: Column): void;
	    isLeftMostElement(element: CardElement): boolean;
	    isRightMostElement(element: CardElement): boolean;
	    getAllInputs(): Array<Input>;
	    getElementById(id: string): CardElement;
	    getActionById(id: string): Action;
	    renderSpeech(): string;
	    selectAction: Action;
	}
	export class Version {
	    private _versionString;
	    private _major;
	    private _minor;
	    private _isValid;
	    constructor(major?: number, minor?: number);
	    static parse(versionString: string): Version;
	    toString(): string;
	    readonly major: number;
	    readonly minor: number;
	    readonly isValid: boolean;
	}
	export abstract class ContainerWithActions extends Container {
	    private _actionCollection;
	    protected internalRender(): HTMLElement;
	    constructor();
	    getActionById(id: string): Action;
	    parse(json: any, itemsCollectionPropertyName?: string): void;
	    validate(): Array<IValidationError>;
	    isLastElement(element: CardElement): boolean;
	    addAction(action: Action): void;
	    clear(): void;
	    getAllInputs(): Array<Input>;
	    readonly isStandalone: boolean;
	}
	export abstract class TypeRegistry<T> {
	    private _items;
	    private findTypeRegistration(typeName);
	    constructor();
	    clear(): void;
	    abstract reset(): any;
	    registerType(typeName: string, createInstance: () => T): void;
	    unregisterType(typeName: string): void;
	    createInstance(typeName: string): T;
	}
	export class ElementTypeRegistry extends TypeRegistry<CardElement> {
	    reset(): void;
	}
	export class ActionTypeRegistry extends TypeRegistry<Action> {
	    reset(): void;
	}
	export class AdaptiveCard extends ContainerWithActions {
	    private static currentVersion;
	    static preExpandSingleShowCardAction: boolean;
	    static useAdvancedTextBlockTruncation: boolean;
	    static readonly elementTypeRegistry: ElementTypeRegistry;
	    static readonly actionTypeRegistry: ActionTypeRegistry;
	    static onAnchorClicked: (anchor: HTMLAnchorElement) => boolean;
	    static onExecuteAction: (action: Action) => void;
	    static onElementVisibilityChanged: (element: CardElement) => void;
	    static onInlineCardExpanded: (action: ShowCardAction, isExpanded: boolean) => void;
	    static onParseElement: (element: CardElement, json: any) => void;
	    static onParseError: (error: IValidationError) => void;
	    static processMarkdown: (text: string) => string;
	    private isVersionSupported();
	    private _cardTypeName;
	    protected showBottomSpacer(requestingElement: CardElement): void;
	    protected hideBottomSpacer(requestingElement: CardElement): void;
	    protected applyPadding(): void;
	    protected readonly bypassVersionCheck: boolean;
	    protected readonly defaultPadding: HostConfig.PaddingDefinition;
	    protected readonly allowCustomPadding: boolean;
	    protected readonly allowCustomStyle: boolean;
	    protected readonly hasBackground: boolean;
	    onAnchorClicked: (anchor: HTMLAnchorElement) => boolean;
	    onExecuteAction: (action: Action) => void;
	    onElementVisibilityChanged: (element: CardElement) => void;
	    onInlineCardExpanded: (action: ShowCardAction, isExpanded: boolean) => void;
	    onParseElement: (element: CardElement, json: any) => void;
	    version?: Version;
	    fallbackText: string;
	    type: string;
	    getJsonTypeName(): string;
	    validate(): Array<IValidationError>;
	    parse(json: any): void;
	    render(target?: HTMLElement): HTMLElement;
	    canContentBleed(): boolean;
	}

}
declare module 'adaptivecards/rendercard' {
	import { Action, ShowCardAction, CardElement, HostConfig } from 'adaptivecards/adaptivecards';
	import { IAdaptiveCard } from 'adaptivecards/schema';
	export interface IRenderOptions {
	    hostConfig?: HostConfig | string | object;
	    onAnchorClicked?: (anchor: HTMLAnchorElement) => boolean;
	    onExecuteAction?: (action: Action) => void;
	    onElementVisibilityChanged?: (element: CardElement) => void;
	    onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;
	    onParseElement?: (element: CardElement, json: any) => void;
	    processMarkdown?: (text: string) => string;
	}
	export function renderCard(card: IAdaptiveCard | string, options?: IRenderOptions, target?: HTMLElement): HTMLElement;

}
declare module 'adaptivecards/adaptivecards' {
	export * from 'adaptivecards/card-elements';
	export * from 'adaptivecards/enums';
	export * from 'adaptivecards/host-config';
	export { IAdaptiveCard, ICardElement } from 'adaptivecards/schema';
	export { renderCard } from 'adaptivecards/rendercard';

}
